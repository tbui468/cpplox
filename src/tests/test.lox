var comment = "using string since comments aren't implemented yet";
var tests = "var declaration, var assignment, expressions, scope, if/else, while, for";

var a;
if(a == nil){
  print "Variable Declaration: Passed";
}else{
  print "Variable Declaration: Failed";
}

var b = 10;
if(b == 10){
  print "Variable Number Assignment: Passed";
}else{
  print "Variable Number Assignment: Failed";
}

var c = "cat d";
if(c == "cat d"){
  print "Variable String Assignment: Passed";
}else{
  print "Variable String Assignment: Failed";
}

var d = 1;
var e = 11;
{
  var d = 2;
  e = 22;
  if(d == 2 and e == 22){
    print "Override Outer Scope: Passed";
  }else{
    print "Override Outer Scope: Failed";
  }
}

if(d == 1 and e == 22){
  print "Return to Outer Scope: Passed";
}else{
  print "Return to Outer Scope: Failed";
}

var f = 0;
while (f < 10) {
  f = f + 1;
}

if(f == 10){
  print "While Loop: Passed";
}else{
  print "While Loop: Failed";
}

var h = "";
for (var g = 3; g > 0; g = g - 1) {
  h = h + "a";
}

if(h == "aaa"){
  print "For Loop: Passed";
}else{
  print "For Loop: Failed";
}

fun fib(i) {
  if (i <= 1) {
    return i;
  }
  return fib(i-2) + fib(i-1);
}

if(fib(2) == 1 and fib(3) == 2) {
  print "Function: Passed";
} else {
  print "Function: Failed";
}

fun make_counter() {
  var j = 0;
  fun count() {
    j = j +1;
    return j;
  }

  return count;
}

var counter = make_counter();
if(counter() == 1 and counter() == 2) {
  print "Nested Function: Passed";
} else {
  print "Nested Function: Failed";
}

var k = "global";
{
  fun show_k() {
    return k;
  }

  var l = show_k();
  var k = "block";
  var m = show_k();
  if ( l == "global" and m == "global") {
    print "Function Declaration Closures: Passed";
  } else {
    print "Function Declaration Closures: Failed";
  }  
}

fun get_func(m) {
  fun scale(n) {
    return n*m;
  }
  return scale;
}

if (get_func(4)(2) == 8) {
  print "Chaining Function Calls: Passed";
} else {
  print "Chaining Function Calls: Failed";
}

{
  class Dog {}
  var dog = Dog();
  dog.name = "Mittens";

  if(dog.name == "Mittens") {
    print "Class Getter and Setters: Passed";
  } else {
    print "Class Getter and Setters: Failed";
  }
}

{
  class Bacon {
    eat() {
      return "Crunchy";
    }

  }

  if(Bacon().eat() == "Crunchy") {
    print "Class methods: Passed";
  } else {
    print "Class methods: Failed";
  }
}


{
  class Cake {
    taste() {
      var fruit = " bananas";
      return this.flavor + fruit;
    }
  }

  var cake = Cake();
  cake.flavor = "sweet";
  if(cake.taste() == "sweet bananas") {
    print "'this' Keyword: Passed";
  } else {
    print "'this' Keyword: Failed";
  }
}

{

  class Dog {
    init(name) {
      this.name = name;
    }
  }

  var dog = Dog("Mittens");

  if (dog.name == "Mittens") {
    print "Class Initializers: Passed";
  } else {
    print "Class Initializers: Failed";
  }

}

